syntax = "proto3";

package apis;
option go_package = ".;lostmyid_v1";

import "validate.proto";
import "money.proto";
import "interval.proto";


//Request to log a Collectible card
message CollectibleRequest {
    repeated string file_id = 1 [(validate.rules).repeated = {min_items: 1, max_items: 5, items: { string: {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}}}];
    map<string,string> properties = 2;
}

message CollectibleResponse {
    string id = 1;
    repeated string file_id = 2;
    map<string, string> properties = 3;
    string state = 4;
}

message SearchRequest {
    string id = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,40}" }];
    string query = 2;
    map<string, string> properties = 3;
}

message SearchResponse {
    string id = 1;
    string query = 2;
    map<string, string> properties = 3;
    string state = 4;
}

enum ITEMType {
    COLLECTIBLE = 0;
    SEARCH = 1;
    TRANSACTION = 2;
}


message ProgressRequest {
    string id = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,40}" }];
    ITEMType type = 2 [(validate.rules).enum.defined_only = true];
}


message TransactionItem {
    string id = 1;
    string datetime = 2;
    bool credit = 3;
    google.type.Money amount = 4;
    string description = 5;
}


message ProgressItem {
    string id = 1;
    string datetime = 2;
    string state = 3;
    string description = 4;

}

message ProgressResponse {
    string id = 1;
    ITEMType type = 2;
    map<string, string> properties = 3;
    string state = 4;
    repeated ProgressItem items = 5;
    repeated TransactionItem transactions = 6;
}

message Pagination{
    int32 count = 1;
    int32 page = 2;
}

message RangeSpanRequest {

    oneof range {
        // either pagination or time interval must be set.
        option (validate.required) = true;

        Pagination pagination = 1;
        google.type.Interval interval = 2;
    }

}


service LostMyIdService {

    // Log a new Collectible request
    rpc Collectible (CollectibleRequest) returns (CollectibleResponse);

    rpc CollectibleList (RangeSpanRequest) returns (stream CollectibleResponse);

    // Log a new search request
    rpc Search (SearchRequest) returns (SearchResponse);

    rpc SearchList (RangeSpanRequest) returns (stream CollectibleResponse);

    rpc Progress (ProgressRequest) returns (ProgressResponse);

    rpc TransactionList (RangeSpanRequest) returns (stream SearchResponse);

}
