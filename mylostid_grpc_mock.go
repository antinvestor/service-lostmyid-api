// Code generated by MockGen. DO NOT EDIT.
// Source: mylostid_grpc.pb.go

// Package mylostidv1 is a generated GoMock package.
package mylostidv1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockLostMyIdServiceClient is a mock of LostMyIdServiceClient interface.
type MockLostMyIdServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLostMyIdServiceClientMockRecorder
}

// MockLostMyIdServiceClientMockRecorder is the mock recorder for MockLostMyIdServiceClient.
type MockLostMyIdServiceClientMockRecorder struct {
	mock *MockLostMyIdServiceClient
}

// NewMockLostMyIdServiceClient creates a new mock instance.
func NewMockLostMyIdServiceClient(ctrl *gomock.Controller) *MockLostMyIdServiceClient {
	mock := &MockLostMyIdServiceClient{ctrl: ctrl}
	mock.recorder = &MockLostMyIdServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostMyIdServiceClient) EXPECT() *MockLostMyIdServiceClientMockRecorder {
	return m.recorder
}

// Collectible mocks base method.
func (m *MockLostMyIdServiceClient) Collectible(ctx context.Context, in *CollectibleRequest, opts ...grpc.CallOption) (*CollectibleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collectible", varargs...)
	ret0, _ := ret[0].(*CollectibleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collectible indicates an expected call of Collectible.
func (mr *MockLostMyIdServiceClientMockRecorder) Collectible(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collectible", reflect.TypeOf((*MockLostMyIdServiceClient)(nil).Collectible), varargs...)
}

// CollectibleList mocks base method.
func (m *MockLostMyIdServiceClient) CollectibleList(ctx context.Context, in *RangeSpanRequest, opts ...grpc.CallOption) (LostMyIdService_CollectibleListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectibleList", varargs...)
	ret0, _ := ret[0].(LostMyIdService_CollectibleListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectibleList indicates an expected call of CollectibleList.
func (mr *MockLostMyIdServiceClientMockRecorder) CollectibleList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectibleList", reflect.TypeOf((*MockLostMyIdServiceClient)(nil).CollectibleList), varargs...)
}

// Progress mocks base method.
func (m *MockLostMyIdServiceClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Progress", varargs...)
	ret0, _ := ret[0].(*ProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Progress indicates an expected call of Progress.
func (mr *MockLostMyIdServiceClientMockRecorder) Progress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockLostMyIdServiceClient)(nil).Progress), varargs...)
}

// Search mocks base method.
func (m *MockLostMyIdServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLostMyIdServiceClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLostMyIdServiceClient)(nil).Search), varargs...)
}

// SearchList mocks base method.
func (m *MockLostMyIdServiceClient) SearchList(ctx context.Context, in *RangeSpanRequest, opts ...grpc.CallOption) (LostMyIdService_SearchListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchList", varargs...)
	ret0, _ := ret[0].(LostMyIdService_SearchListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchList indicates an expected call of SearchList.
func (mr *MockLostMyIdServiceClientMockRecorder) SearchList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchList", reflect.TypeOf((*MockLostMyIdServiceClient)(nil).SearchList), varargs...)
}

// TransactionList mocks base method.
func (m *MockLostMyIdServiceClient) TransactionList(ctx context.Context, in *RangeSpanRequest, opts ...grpc.CallOption) (LostMyIdService_TransactionListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransactionList", varargs...)
	ret0, _ := ret[0].(LostMyIdService_TransactionListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionList indicates an expected call of TransactionList.
func (mr *MockLostMyIdServiceClientMockRecorder) TransactionList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionList", reflect.TypeOf((*MockLostMyIdServiceClient)(nil).TransactionList), varargs...)
}

// MockLostMyIdService_CollectibleListClient is a mock of LostMyIdService_CollectibleListClient interface.
type MockLostMyIdService_CollectibleListClient struct {
	ctrl     *gomock.Controller
	recorder *MockLostMyIdService_CollectibleListClientMockRecorder
}

// MockLostMyIdService_CollectibleListClientMockRecorder is the mock recorder for MockLostMyIdService_CollectibleListClient.
type MockLostMyIdService_CollectibleListClientMockRecorder struct {
	mock *MockLostMyIdService_CollectibleListClient
}

// NewMockLostMyIdService_CollectibleListClient creates a new mock instance.
func NewMockLostMyIdService_CollectibleListClient(ctrl *gomock.Controller) *MockLostMyIdService_CollectibleListClient {
	mock := &MockLostMyIdService_CollectibleListClient{ctrl: ctrl}
	mock.recorder = &MockLostMyIdService_CollectibleListClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostMyIdService_CollectibleListClient) EXPECT() *MockLostMyIdService_CollectibleListClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLostMyIdService_CollectibleListClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLostMyIdService_CollectibleListClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLostMyIdService_CollectibleListClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLostMyIdService_CollectibleListClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostMyIdService_CollectibleListClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostMyIdService_CollectibleListClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLostMyIdService_CollectibleListClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLostMyIdService_CollectibleListClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLostMyIdService_CollectibleListClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLostMyIdService_CollectibleListClient) Recv() (*CollectibleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*CollectibleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLostMyIdService_CollectibleListClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLostMyIdService_CollectibleListClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLostMyIdService_CollectibleListClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostMyIdService_CollectibleListClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostMyIdService_CollectibleListClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLostMyIdService_CollectibleListClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostMyIdService_CollectibleListClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostMyIdService_CollectibleListClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLostMyIdService_CollectibleListClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLostMyIdService_CollectibleListClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLostMyIdService_CollectibleListClient)(nil).Trailer))
}

// MockLostMyIdService_SearchListClient is a mock of LostMyIdService_SearchListClient interface.
type MockLostMyIdService_SearchListClient struct {
	ctrl     *gomock.Controller
	recorder *MockLostMyIdService_SearchListClientMockRecorder
}

// MockLostMyIdService_SearchListClientMockRecorder is the mock recorder for MockLostMyIdService_SearchListClient.
type MockLostMyIdService_SearchListClientMockRecorder struct {
	mock *MockLostMyIdService_SearchListClient
}

// NewMockLostMyIdService_SearchListClient creates a new mock instance.
func NewMockLostMyIdService_SearchListClient(ctrl *gomock.Controller) *MockLostMyIdService_SearchListClient {
	mock := &MockLostMyIdService_SearchListClient{ctrl: ctrl}
	mock.recorder = &MockLostMyIdService_SearchListClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostMyIdService_SearchListClient) EXPECT() *MockLostMyIdService_SearchListClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLostMyIdService_SearchListClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLostMyIdService_SearchListClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLostMyIdService_SearchListClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLostMyIdService_SearchListClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostMyIdService_SearchListClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostMyIdService_SearchListClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLostMyIdService_SearchListClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLostMyIdService_SearchListClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLostMyIdService_SearchListClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLostMyIdService_SearchListClient) Recv() (*SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLostMyIdService_SearchListClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLostMyIdService_SearchListClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLostMyIdService_SearchListClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostMyIdService_SearchListClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostMyIdService_SearchListClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLostMyIdService_SearchListClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostMyIdService_SearchListClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostMyIdService_SearchListClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLostMyIdService_SearchListClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLostMyIdService_SearchListClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLostMyIdService_SearchListClient)(nil).Trailer))
}

// MockLostMyIdService_TransactionListClient is a mock of LostMyIdService_TransactionListClient interface.
type MockLostMyIdService_TransactionListClient struct {
	ctrl     *gomock.Controller
	recorder *MockLostMyIdService_TransactionListClientMockRecorder
}

// MockLostMyIdService_TransactionListClientMockRecorder is the mock recorder for MockLostMyIdService_TransactionListClient.
type MockLostMyIdService_TransactionListClientMockRecorder struct {
	mock *MockLostMyIdService_TransactionListClient
}

// NewMockLostMyIdService_TransactionListClient creates a new mock instance.
func NewMockLostMyIdService_TransactionListClient(ctrl *gomock.Controller) *MockLostMyIdService_TransactionListClient {
	mock := &MockLostMyIdService_TransactionListClient{ctrl: ctrl}
	mock.recorder = &MockLostMyIdService_TransactionListClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostMyIdService_TransactionListClient) EXPECT() *MockLostMyIdService_TransactionListClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockLostMyIdService_TransactionListClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockLostMyIdService_TransactionListClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLostMyIdService_TransactionListClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockLostMyIdService_TransactionListClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostMyIdService_TransactionListClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostMyIdService_TransactionListClient)(nil).Context))
}

// Header mocks base method.
func (m *MockLostMyIdService_TransactionListClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockLostMyIdService_TransactionListClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLostMyIdService_TransactionListClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockLostMyIdService_TransactionListClient) Recv() (*TransactionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*TransactionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLostMyIdService_TransactionListClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLostMyIdService_TransactionListClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockLostMyIdService_TransactionListClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostMyIdService_TransactionListClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostMyIdService_TransactionListClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockLostMyIdService_TransactionListClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostMyIdService_TransactionListClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostMyIdService_TransactionListClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockLostMyIdService_TransactionListClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockLostMyIdService_TransactionListClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLostMyIdService_TransactionListClient)(nil).Trailer))
}

// MockLostMyIdServiceServer is a mock of LostMyIdServiceServer interface.
type MockLostMyIdServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLostMyIdServiceServerMockRecorder
}

// MockLostMyIdServiceServerMockRecorder is the mock recorder for MockLostMyIdServiceServer.
type MockLostMyIdServiceServerMockRecorder struct {
	mock *MockLostMyIdServiceServer
}

// NewMockLostMyIdServiceServer creates a new mock instance.
func NewMockLostMyIdServiceServer(ctrl *gomock.Controller) *MockLostMyIdServiceServer {
	mock := &MockLostMyIdServiceServer{ctrl: ctrl}
	mock.recorder = &MockLostMyIdServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostMyIdServiceServer) EXPECT() *MockLostMyIdServiceServerMockRecorder {
	return m.recorder
}

// Collectible mocks base method.
func (m *MockLostMyIdServiceServer) Collectible(arg0 context.Context, arg1 *CollectibleRequest) (*CollectibleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collectible", arg0, arg1)
	ret0, _ := ret[0].(*CollectibleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collectible indicates an expected call of Collectible.
func (mr *MockLostMyIdServiceServerMockRecorder) Collectible(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collectible", reflect.TypeOf((*MockLostMyIdServiceServer)(nil).Collectible), arg0, arg1)
}

// CollectibleList mocks base method.
func (m *MockLostMyIdServiceServer) CollectibleList(arg0 *RangeSpanRequest, arg1 LostMyIdService_CollectibleListServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectibleList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectibleList indicates an expected call of CollectibleList.
func (mr *MockLostMyIdServiceServerMockRecorder) CollectibleList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectibleList", reflect.TypeOf((*MockLostMyIdServiceServer)(nil).CollectibleList), arg0, arg1)
}

// Progress mocks base method.
func (m *MockLostMyIdServiceServer) Progress(arg0 context.Context, arg1 *ProgressRequest) (*ProgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Progress", arg0, arg1)
	ret0, _ := ret[0].(*ProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Progress indicates an expected call of Progress.
func (mr *MockLostMyIdServiceServerMockRecorder) Progress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockLostMyIdServiceServer)(nil).Progress), arg0, arg1)
}

// Search mocks base method.
func (m *MockLostMyIdServiceServer) Search(arg0 context.Context, arg1 *SearchRequest) (*SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLostMyIdServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLostMyIdServiceServer)(nil).Search), arg0, arg1)
}

// SearchList mocks base method.
func (m *MockLostMyIdServiceServer) SearchList(arg0 *RangeSpanRequest, arg1 LostMyIdService_SearchListServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchList indicates an expected call of SearchList.
func (mr *MockLostMyIdServiceServerMockRecorder) SearchList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchList", reflect.TypeOf((*MockLostMyIdServiceServer)(nil).SearchList), arg0, arg1)
}

// TransactionList mocks base method.
func (m *MockLostMyIdServiceServer) TransactionList(arg0 *RangeSpanRequest, arg1 LostMyIdService_TransactionListServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransactionList indicates an expected call of TransactionList.
func (mr *MockLostMyIdServiceServerMockRecorder) TransactionList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionList", reflect.TypeOf((*MockLostMyIdServiceServer)(nil).TransactionList), arg0, arg1)
}

// mustEmbedUnimplementedLostMyIdServiceServer mocks base method.
func (m *MockLostMyIdServiceServer) mustEmbedUnimplementedLostMyIdServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLostMyIdServiceServer")
}

// mustEmbedUnimplementedLostMyIdServiceServer indicates an expected call of mustEmbedUnimplementedLostMyIdServiceServer.
func (mr *MockLostMyIdServiceServerMockRecorder) mustEmbedUnimplementedLostMyIdServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLostMyIdServiceServer", reflect.TypeOf((*MockLostMyIdServiceServer)(nil).mustEmbedUnimplementedLostMyIdServiceServer))
}

// MockUnsafeLostMyIdServiceServer is a mock of UnsafeLostMyIdServiceServer interface.
type MockUnsafeLostMyIdServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLostMyIdServiceServerMockRecorder
}

// MockUnsafeLostMyIdServiceServerMockRecorder is the mock recorder for MockUnsafeLostMyIdServiceServer.
type MockUnsafeLostMyIdServiceServerMockRecorder struct {
	mock *MockUnsafeLostMyIdServiceServer
}

// NewMockUnsafeLostMyIdServiceServer creates a new mock instance.
func NewMockUnsafeLostMyIdServiceServer(ctrl *gomock.Controller) *MockUnsafeLostMyIdServiceServer {
	mock := &MockUnsafeLostMyIdServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLostMyIdServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLostMyIdServiceServer) EXPECT() *MockUnsafeLostMyIdServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLostMyIdServiceServer mocks base method.
func (m *MockUnsafeLostMyIdServiceServer) mustEmbedUnimplementedLostMyIdServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLostMyIdServiceServer")
}

// mustEmbedUnimplementedLostMyIdServiceServer indicates an expected call of mustEmbedUnimplementedLostMyIdServiceServer.
func (mr *MockUnsafeLostMyIdServiceServerMockRecorder) mustEmbedUnimplementedLostMyIdServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLostMyIdServiceServer", reflect.TypeOf((*MockUnsafeLostMyIdServiceServer)(nil).mustEmbedUnimplementedLostMyIdServiceServer))
}

// MockLostMyIdService_CollectibleListServer is a mock of LostMyIdService_CollectibleListServer interface.
type MockLostMyIdService_CollectibleListServer struct {
	ctrl     *gomock.Controller
	recorder *MockLostMyIdService_CollectibleListServerMockRecorder
}

// MockLostMyIdService_CollectibleListServerMockRecorder is the mock recorder for MockLostMyIdService_CollectibleListServer.
type MockLostMyIdService_CollectibleListServerMockRecorder struct {
	mock *MockLostMyIdService_CollectibleListServer
}

// NewMockLostMyIdService_CollectibleListServer creates a new mock instance.
func NewMockLostMyIdService_CollectibleListServer(ctrl *gomock.Controller) *MockLostMyIdService_CollectibleListServer {
	mock := &MockLostMyIdService_CollectibleListServer{ctrl: ctrl}
	mock.recorder = &MockLostMyIdService_CollectibleListServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostMyIdService_CollectibleListServer) EXPECT() *MockLostMyIdService_CollectibleListServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLostMyIdService_CollectibleListServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostMyIdService_CollectibleListServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostMyIdService_CollectibleListServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLostMyIdService_CollectibleListServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostMyIdService_CollectibleListServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostMyIdService_CollectibleListServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLostMyIdService_CollectibleListServer) Send(arg0 *CollectibleResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLostMyIdService_CollectibleListServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLostMyIdService_CollectibleListServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLostMyIdService_CollectibleListServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLostMyIdService_CollectibleListServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLostMyIdService_CollectibleListServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLostMyIdService_CollectibleListServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostMyIdService_CollectibleListServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostMyIdService_CollectibleListServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLostMyIdService_CollectibleListServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLostMyIdService_CollectibleListServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLostMyIdService_CollectibleListServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLostMyIdService_CollectibleListServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLostMyIdService_CollectibleListServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLostMyIdService_CollectibleListServer)(nil).SetTrailer), arg0)
}

// MockLostMyIdService_SearchListServer is a mock of LostMyIdService_SearchListServer interface.
type MockLostMyIdService_SearchListServer struct {
	ctrl     *gomock.Controller
	recorder *MockLostMyIdService_SearchListServerMockRecorder
}

// MockLostMyIdService_SearchListServerMockRecorder is the mock recorder for MockLostMyIdService_SearchListServer.
type MockLostMyIdService_SearchListServerMockRecorder struct {
	mock *MockLostMyIdService_SearchListServer
}

// NewMockLostMyIdService_SearchListServer creates a new mock instance.
func NewMockLostMyIdService_SearchListServer(ctrl *gomock.Controller) *MockLostMyIdService_SearchListServer {
	mock := &MockLostMyIdService_SearchListServer{ctrl: ctrl}
	mock.recorder = &MockLostMyIdService_SearchListServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostMyIdService_SearchListServer) EXPECT() *MockLostMyIdService_SearchListServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLostMyIdService_SearchListServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostMyIdService_SearchListServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostMyIdService_SearchListServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLostMyIdService_SearchListServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostMyIdService_SearchListServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostMyIdService_SearchListServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLostMyIdService_SearchListServer) Send(arg0 *SearchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLostMyIdService_SearchListServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLostMyIdService_SearchListServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLostMyIdService_SearchListServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLostMyIdService_SearchListServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLostMyIdService_SearchListServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLostMyIdService_SearchListServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostMyIdService_SearchListServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostMyIdService_SearchListServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLostMyIdService_SearchListServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLostMyIdService_SearchListServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLostMyIdService_SearchListServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLostMyIdService_SearchListServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLostMyIdService_SearchListServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLostMyIdService_SearchListServer)(nil).SetTrailer), arg0)
}

// MockLostMyIdService_TransactionListServer is a mock of LostMyIdService_TransactionListServer interface.
type MockLostMyIdService_TransactionListServer struct {
	ctrl     *gomock.Controller
	recorder *MockLostMyIdService_TransactionListServerMockRecorder
}

// MockLostMyIdService_TransactionListServerMockRecorder is the mock recorder for MockLostMyIdService_TransactionListServer.
type MockLostMyIdService_TransactionListServerMockRecorder struct {
	mock *MockLostMyIdService_TransactionListServer
}

// NewMockLostMyIdService_TransactionListServer creates a new mock instance.
func NewMockLostMyIdService_TransactionListServer(ctrl *gomock.Controller) *MockLostMyIdService_TransactionListServer {
	mock := &MockLostMyIdService_TransactionListServer{ctrl: ctrl}
	mock.recorder = &MockLostMyIdService_TransactionListServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLostMyIdService_TransactionListServer) EXPECT() *MockLostMyIdService_TransactionListServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLostMyIdService_TransactionListServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLostMyIdService_TransactionListServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLostMyIdService_TransactionListServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockLostMyIdService_TransactionListServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLostMyIdService_TransactionListServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLostMyIdService_TransactionListServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockLostMyIdService_TransactionListServer) Send(arg0 *TransactionItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLostMyIdService_TransactionListServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLostMyIdService_TransactionListServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLostMyIdService_TransactionListServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLostMyIdService_TransactionListServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLostMyIdService_TransactionListServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockLostMyIdService_TransactionListServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLostMyIdService_TransactionListServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLostMyIdService_TransactionListServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockLostMyIdService_TransactionListServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLostMyIdService_TransactionListServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLostMyIdService_TransactionListServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLostMyIdService_TransactionListServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLostMyIdService_TransactionListServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLostMyIdService_TransactionListServer)(nil).SetTrailer), arg0)
}
